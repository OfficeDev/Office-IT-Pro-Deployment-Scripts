<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
                    mc:Ignorable="options">

    <Color x:Key="ErrorColor">#FFcd4141</Color>
    <Color x:Key="MessageColor">#FF069dc9</Color>
    <Color x:Key="GrayColor">#FF666666</Color>

    <SolidColorBrush x:Key="GrayBrush" Color="{DynamicResource GrayColor}"/>
    <SolidColorBrush x:Key="ErrorBrush" Color="{DynamicResource ErrorColor}"/>
    <SolidColorBrush x:Key="MessageBrush" Color="{DynamicResource MessageColor}"/>

    <Style TargetType="{x:Type Label}" x:Key="MetroLabelTopHeader" BasedOn="{StaticResource MetroLabel}">
        <Setter Property="Foreground" Value="{DynamicResource LabelTextBrushCustom}" />
        <Setter Property="FontSize" Value="26"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="Thin"></Setter>
        <Setter Property="Padding" Value="0 10 0 0"></Setter>
    </Style>


    <Style TargetType="{x:Type Controls:ToggleSwitch}" x:Key="MetroToggleSwitchStyle" BasedOn="{StaticResource MetroToggleSwitch}">
        <Setter Property="Foreground" Value="{StaticResource GrayBrush}" />
    </Style>

    <Style TargetType="{x:Type ComboBox}" x:Key="MetroComboBoxStyle" BasedOn="{StaticResource MetroComboBox}">
        <Setter Property="Foreground" Value="{StaticResource GrayBrush}" />
        <Setter Property="BorderThickness"  Value="2"   />
        <Setter Property="BorderBrush" Value="{StaticResource GrayBrush}" />
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="MetroFlatButtonStyle1" BasedOn="{StaticResource MetroButton}">
        <Setter Property="Controls:ControlsHelper.ContentCharacterCasing"
                Value="Normal" />
        <Setter Property="Foreground" Value="{StaticResource GrayBrush}" />
        <Setter Property="FontSize" Value="12" />
    </Style>

    <Style TargetType="{x:Type TabItem}" x:Key="CustomMetroTabLabelTopHeader" BasedOn="{StaticResource MetroTabItem}">
        <Setter Property="Foreground" Value="#ADAEB0" />
        <Setter Property="FontSize" Value="24"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="Normal"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Padding" Value="10 10 10 5"></Setter>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="CustomMetroLabelTopHeader" BasedOn="{StaticResource MetroLabel}">
        <Setter Property="Foreground" Value="#ADAEB0" />
        <Setter Property="Background" Value="{StaticResource GrayBrush}"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="SemiBold"></Setter>
        <Setter Property="Padding" Value="0 10 0 0"></Setter>
        
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}" Value="True">
                <Setter Property="Foreground" Value="#00BCF2 "></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}" Value="False">
                <Setter Property="Foreground" Value="#ADAEB0"></Setter>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style TargetType="{x:Type ListBox}" x:Key="VirtualizedMetroListBox">
        <Setter Property="Foreground" Value="{StaticResource GrayBrush}" />
        <Setter Property="FontSize" Value="18"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="SemiBold"></Setter>
        <Setter Property="BorderBrush" Value="{StaticResource GrayBrush}"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}" Value="True">
                <Setter Property="Foreground" Value="#00BCF2 "></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}" Value="False">
                <Setter Property="Foreground" Value="#ADAEB0"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="MetroLabelHeader" BasedOn="{StaticResource MetroLabel}">
        <Setter Property="Foreground" Value="{DynamicResource LabelTextBrushCustom}" />
        <Setter Property="FontSize" Value="24"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="Thin"></Setter>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="CustomMetroLabelLink" BasedOn="{StaticResource MetroLabel}">
        <Setter Property="Foreground" Value="#069dc9" />
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="SemiBold"></Setter>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="CustomMetroLabelHeader" BasedOn="{StaticResource MetroLabel}">
        <Setter Property="Foreground" Value="{StaticResource GrayBrush}" />
        <Setter Property="FontSize" Value="18"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="SemiBold"></Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}" x:Key="MetroCheckBox" BasedOn="{StaticResource MetroCheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
        <Setter Property="FontSize" Value="18"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="SemiBold"></Setter>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="MetroLabelText" BasedOn="{StaticResource MetroLabel}">
        <Setter Property="Foreground" Value="{DynamicResource LabelTextBrushCustom}" />
        <Setter Property="FontSize" Value="18"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="Thin"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="MetroLabelTextBlock" BasedOn="{StaticResource MetroTextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource LabelTextBrushCustom}" />
        <Setter Property="FontSize" Value="15"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="Thin"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="CustomMetroLabelTextBlock" BasedOn="{StaticResource MetroTextBlock}">
        <Setter Property="Foreground" Value="{StaticResource GrayBrush}" />
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="Normal"></Setter>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="MetroLabelTextSmall" BasedOn="{StaticResource MetroLabel}">
        <Setter Property="Foreground" Value="{DynamicResource LabelTextBrushCustom}" />
        <Setter Property="FontSize" Value="12"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="Thin"></Setter>
    </Style>

    <Style TargetType="DataGridCell" x:Key="DGCellStyle">
        <Setter Property="Foreground" Value="{DynamicResource LabelTextBrushCustom}"/>
        <Setter Property="FontSize" Value="20"/>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="MetroInfoButton" BasedOn="{StaticResource MetroButton}">
        <Setter Property="Foreground" Value="{DynamicResource LabelTextBrushCustom}" />
        <Setter Property="FontSize" Value="15"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="Thin"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="CustomMetroInfoButton" BasedOn="{StaticResource MetroButton}">
        <Setter Property="Foreground" Value="#333333" />
        <Setter Property="FontSize" Value="10"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"></Setter>
        <Setter Property="FontWeight" Value="Thin"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
    </Style>

    <SolidColorBrush x:Key="LabelTextBrushCustom" Color="{DynamicResource Gray2}" />

    <Color x:Key="TopBarColor">#0072c5</Color>

    <SolidColorBrush x:Key="WindowTitleColorBrush" Color="#f4f4f4" options:Freeze="True" />

    <system:Double x:Key="WindowTitleFontSize">20</system:Double>

    <Style TargetType="{x:Type Controls:WindowButtonCommands}">
        <Setter Property="VerticalAlignment"
                Value="Top" />
    </Style>

    <Style x:Key="CustomHeaderStyle" TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource MetroGridViewColumnHeader}">
        
        <Setter Property="Foreground" Value="#FF666666"/>
        <Setter Property="BorderThickness" Value="0 0 0 4"></Setter>
 
    </Style>

    <Style TargetType="{x:Type ListViewItem}" x:Key="{x:Type ListViewItem}" >
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource GrayBrush}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">

                    <Border SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        Background="{TemplateBinding Background}">

                        <Grid>
                            

                            <!-- This is used when GridView is put inside the ListView -->
                            <GridViewRowPresenter Content="{TemplateBinding ContentControl.Content}"
                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />

                            <!-- This is used for ListView that does not use GridView -->
                            <ContentPresenter x:Name="contentPresenter"
                                      Content="{TemplateBinding ContentControl.Content}"
                                      Visibility="Collapsed"
                                      ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </Grid>

                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>