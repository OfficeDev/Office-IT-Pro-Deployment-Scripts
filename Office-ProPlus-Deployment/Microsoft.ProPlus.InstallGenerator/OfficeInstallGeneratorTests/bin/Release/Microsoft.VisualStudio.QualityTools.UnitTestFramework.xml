<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.QualityTools.UnitTestFramework</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AfterAssemblyCleanupEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterAssemblyCleanup" /> event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AfterAssemblyInitializeEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterAssemblyInitialize" /> event.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.AfterAssemblyInitializeEventArgs.IsAssemblyInitializeFailed">
      <summary>Gets a value that indicates whether the Microsoft.VisualStudio.QualityTools.UnitTestFramework.dll assembly was not successfully initialized because of an exception.</summary>
      <returns>true if the assembly failed because of an exception; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AfterClassCleanupEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterClassCleanup" /> event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AfterClassInitializeEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterClassInitialize" /> event.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.AfterClassInitializeEventArgs.IsClassInitializeFailed">
      <summary>Gets a value that indicates whether the class that has the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute" /> has not initialized because of an exception.</summary>
      <returns>true if the class that has the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute" /> has not initialized because of an exception; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AfterTestCleanupEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterTestCleanup" /> event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AfterTestInitializeEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterTestInitialize" /> event.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.AfterTestInitializeEventArgs.IsTestInitializeFailed">
      <summary>Gets a value that indicates whether the test method that has the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute" /> applied has failed to be initialized because of an exception.</summary>
      <returns>true if the test method that has the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute" /> applied has not been initialized because of an exception; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute">
      <summary>Identifies a method that contains code to be used after all tests in the assembly have run and to free resources obtained by the assembly. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute">
      <summary>Identifies a method that contains code to be used before all tests in the assembly have run and to allocate resources obtained by the assembly. This class cannot be inherited.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert">
      <summary>Verifies conditions in unit tests using true/false propositions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double)">
      <summary>Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other.</summary>
      <param name="expected">The first double to compare. This is the double the unit test expects.</param>
      <param name="actual">The second double to compare. This is the double the unit test produced.</param>
      <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
      <summary>Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails.</summary>
      <param name="expected">The first double to compare. This is the double the unit test expects.</param>
      <param name="actual">The second double to compare. This is the double the unit test produced.</param>
      <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="expected">The first double to compare. This is the double the unit tests expects.</param>
      <param name="actual">The second double to compare. This is the double the unit test produced.</param>
      <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Object,System.Object)">
      <summary>Verifies that two specified objects are equal. The assertion fails if the objects are not equal.</summary>
      <param name="expected">The first object to compare. This is the object the unit test expects.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Object,System.Object,System.String)">
      <summary>Verifies that two specified objects are equal. The assertion fails if the objects are not equal. Displays a message if the assertion fails.</summary>
      <param name="expected">The first object to compare. This is the object the unit test expects.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
      <summary>Verifies that two specified objects are equal. The assertion fails if the objects are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="expected">The first object to compare. This is the object the unit test expects.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single)">
      <summary>Verifies that two specified singles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other.</summary>
      <param name="expected">The first single to compare. This is the single the unit test expects.</param>
      <param name="actual">The second single to compare. This is the single the unit test produced.</param>
      <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)">
      <summary>Verifies that two specified singles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails.</summary>
      <param name="expected">The first single to compare. This is the single the unit test expects.</param>
      <param name="actual">The second single to compare. This is the single the unit test produced.</param>
      <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that two specified singles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="expected">The first single to compare. This is the single the unit test expects.</param>
      <param name="actual">The second single to compare. This is the single the unit test produced.</param>
      <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean)">
      <summary>Verifies that two specified strings are equal, ignoring case or not as specified. The assertion fails if they are not equal.</summary>
      <param name="expected">The first string to compare. This is the string the unit test expects.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Verifies that two specified strings are equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are not equal.</summary>
      <param name="expected">The first string to compare. This is the string the unit test expects.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
      <summary>Verifies that two specified strings are equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are not equal. Displays a message if the assertion fails.</summary>
      <param name="expected">The first string to compare. This is the string the unit test expects.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
      <summary>Verifies that two specified strings are equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="expected">The first string to compare. This is the string the unit test expects.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String)">
      <summary>Verifies that two specified strings are equal, ignoring case or not as specified. The assertion fails if they are not equal. Displays a message if the assertion fails.</summary>
      <param name="expected">The first string to compare. This is the string the unit test expects.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
      <summary>Verifies that two specified strings are equal, ignoring case or not as specified. The assertion fails if they are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="expected">The first string to compare. This is the string the unit test expects.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0)">
      <summary>Verifies that two specified generic type data are equal by using the equality operator. The assertion fails if they are not equal.</summary>
      <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
      <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.String)">
      <summary>Verifies that two specified generic type data are equal by using the equality operator. The assertion fails if they are not equal. Displays a message if the assertion fails.</summary>
      <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
      <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that two specified generic type data are equal by using the equality operator. The assertion fails if they are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
      <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double)">
      <summary>Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other.</summary>
      <param name="notExpected">The first double to compare. This is the double the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second double to compare. This is the double the unit test produced.</param>
      <param name="delta">The required inaccuracy. The assertion fails only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String)">
      <summary>Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails.</summary>
      <param name="notExpected">The first double to compare. This is the double the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second double to compare. This is the double the unit test produced.</param>
      <param name="delta">The required inaccuracy. The assertion fails only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="notExpected">The first double to compare. This is the double the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second double to compare. This is the double the unit test produced.</param>
      <param name="delta">The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Object,System.Object)">
      <summary>Verifies that two specified objects are not equal. The assertion fails if the objects are equal.</summary>
      <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Object,System.Object,System.String)">
      <summary>Verifies that two specified objects are not equal. The assertion fails if the objects are equal. Displays a message if the assertion fails.</summary>
      <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
      <summary>Verifies that two specified objects are not equal. The assertion fails if the objects are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single)">
      <summary>Verifies that two specified singles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other.</summary>
      <param name="notExpected">The first single to compare. This is the single the unit test expects.</param>
      <param name="actual">The second single to compare. This is the single the unit test produced.</param>
      <param name="delta">The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String)">
      <summary>Verifies that two specified singles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails.</summary>
      <param name="notExpected">The first single to compare. This is the single the unit test expects.</param>
      <param name="actual">The second single to compare. This is the single the unit test produced.</param>
      <param name="delta">The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that two specified singles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="notExpected">The first single to compare. This is the single the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second single to compare. This is the single the unit test produced.</param>
      <param name="delta">The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean)">
      <summary>Verifies that two specified strings are not equal, ignoring case or not as specified. The assertion fails if they are equal.</summary>
      <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Verifies that two specified strings are not equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are equal.</summary>
      <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
      <summary>Verifies that two specified strings are not equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are equal. Displays a message if the assertion fails.</summary>
      <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
      <summary>Verifies that two specified strings are not equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String)">
      <summary>Verifies that two specified strings are not equal, ignoring case or not as specified. The assertion fails if they are equal. Displays a message if the assertion fails.</summary>
      <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
      <summary>Verifies that two specified strings are not equal, ignoring case or not as specified. The assertion fails if they are equal. Displays a message if the assertion fails, and applies the specified formatting to it. </summary>
      <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second string to compare. This is the string the unit test produced.</param>
      <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0)">
      <summary>Verifies that two specified generic type data are not equal. The assertion fails if they are equal.</summary>
      <param name="notExpected">The first generic type data to compare. This is the generic type data the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String)">
      <summary>Verifies that two specified generic type data are not equal. The assertion fails if they are equal. Displays a message if the assertion fails.</summary>
      <param name="notExpected">The first generic type data to compare. This is the generic type data the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that two specified generic type data are not equal. The assertion fails if they are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="notExpected">The first generic type data to compare. This is the generic type data the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame(System.Object,System.Object)">
      <summary>Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object.</summary>
      <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> refers to the same object as <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame(System.Object,System.Object,System.String)">
      <summary>Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object. Displays a message if the assertion fails. </summary>
      <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> refers to the same object as <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
      <summary>Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> refers to the same object as <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame(System.Object,System.Object)">
      <summary>Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects.</summary>
      <param name="expected">The first object to compare. This is the object the unit test expects.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> does not refer to the same object as <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame(System.Object,System.Object,System.String)">
      <summary>Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects. Displays a message if the assertion fails.</summary>
      <param name="expected">The first object to compare. This is the object the unit test expects.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> does not refer to the same object as <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
      <summary>Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="expected">The first object to compare. This is the object the unit test expects.</param>
      <param name="actual">The second object to compare. This is the object the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> does not refer to the same object as <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Equals(System.Object,System.Object)">
      <summary>Determines whether two objects are equal.</summary>
      <param name="objA">An object that can be cast to an <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert" /> instance.</param>
      <param name="objB">An object that can be cast to an <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert" /> instance.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail">
      <summary>Fails the assertion without checking any conditions.</summary>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String)">
      <summary>Fails the assertion without checking any conditions. Displays a message.</summary>
      <param name="message">A message to display. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String,System.Object[])">
      <summary>Fails the assertion without checking any conditions. Displays a message, and applies the specified formatting to it.</summary>
      <param name="message">A message to display. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive">
      <summary>Indicates that the assertion cannot be verified.</summary>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String)">
      <summary>Indicates that the assertion can not be verified. Displays a message.</summary>
      <param name="message">A message to display. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String,System.Object[])">
      <summary>Indicates that an assertion can not be verified. Displays a message, and applies the specified formatting to it.</summary>
      <param name="message">A message to display. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">Always thrown.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean)">
      <summary>Verifies that the specified condition is false. The assertion fails if the condition is true.</summary>
      <param name="condition">The condition to verify is false.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to true.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String)">
      <summary>Verifies that the specified condition is false. The assertion fails if the condition is true. Displays a message if the assertion fails.</summary>
      <param name="condition">The condition to verify is false.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to true.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
      <summary>Verifies that the specified condition is false. The assertion fails if the condition is true. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="condition">The condition to verify is false.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to true.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type)">
      <summary>Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found in the inheritance hierarchy of the object.</summary>
      <param name="value">The object to verify is of <paramref name="expectedType" />.</param>
      <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of <paramref name="value" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String)">
      <summary>Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found in the inheritance hierarchy of the object. Displays a message if the assertion fails.</summary>
      <param name="value">The object to verify is of <paramref name="expectedType" />.</param>
      <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of <paramref name="value" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
      <summary>Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="value">The object to verify is of <paramref name="expectedType" />.</param>
      <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of <paramref name="value" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type)">
      <summary>Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found in the inheritance hierarchy of the object.</summary>
      <param name="value">The object to verify is not of <paramref name="wrongType" />.</param>
      <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null and <paramref name="wrongType" /> is found in the inheritance hierarchy of <paramref name="value" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String)">
      <summary>Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found in the inheritance hierarchy of the object. Displays a message if the assertion fails.</summary>
      <param name="value">The object to verify is not of <paramref name="wrongType" />.</param>
      <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results. </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null and <paramref name="wrongType" /> is found in the inheritance hierarchy of <paramref name="value" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
      <summary>Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="value">The object to verify is not of <paramref name="wrongType" />.</param>
      <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results. </param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null and <paramref name="wrongType" /> is found in the inheritance hierarchy of <paramref name="value" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object)">
      <summary>Verifies that the specified object is not null. The assertion fails if it is null.</summary>
      <param name="value">The object to verify is not null.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String)">
      <summary>Verifies that the specified object is not null. The assertion fails if it is null. Displays a message if the assertion fails.</summary>
      <param name="value">The object to verify is not null.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String,System.Object[])">
      <summary>Verifies that the specified object is not null. The assertion fails if it is null. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="value">The object to verify is not null.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object)">
      <summary>Verifies that the specified object is null. The assertion fails if it is not null.</summary>
      <param name="value">The object to verify is null.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String)">
      <summary>Verifies that the specified object is null. The assertion fails if it is not null. Displays a message if the assertion fails.</summary>
      <param name="value">The object to verify is null.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String,System.Object[])">
      <summary>Verifies that the specified object is null. The assertion fails if it is not null. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="value">The object to verify is null.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean)">
      <summary>Verifies that the specified condition is true. The assertion fails if the condition is false.</summary>
      <param name="condition">The condition to verify is true.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to false.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String)">
      <summary>Verifies that the specified condition is true. The assertion fails if the condition is false. Displays a message if the assertion fails.</summary>
      <param name="condition">The condition to verify is true.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to false.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
      <summary>Verifies that the specified condition is true. The assertion fails if the condition is false. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="condition">The condition to verify is true.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to false.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNullChars(System.String)">
      <summary>In a string, replaces null characters ('\0') with "\\0".</summary>
      <returns>The converted string with null characters replaced by "\\0".</returns>
      <param name="input">The string in which to search for and replace null characters. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
      <summary>Used to indicate failure for a test. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException" /> class. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or HResult is zero (0).</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException" /> class that uses with a specified error message.</summary>
      <param name="msg">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="msg">The error message that explains the reason for the exception.</param>
      <param name="ex">The exception that is the cause of the current exception. If the <paramref name="ex" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
      <summary>Used to indicate that a test is not yet implemented. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException" /> class. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException" /> class with serialized data. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> parameter is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException" /> class with a specified error message. </summary>
      <param name="msg">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.  </summary>
      <param name="msg">The error message that explains the reason for the exception.</param>
      <param name="ex">The exception that is the cause of the current exception. If the parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow">
      <summary>This class is used by the publicize method to help test private types. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow" /> class. </summary>
      <param name="privateTarget">Object to store at initialization.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow" /> class.</summary>
      <param name="type">Type to store at initialization.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.AttachShadowName">
      <summary>The name of the static method in derived classes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the current Object.</summary>
      <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
      <param name="obj">The Object to compare with the current Object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.GetShadowAttacher(System.Type)">
      <summary>Used for dynamically restoring of arrays of private types.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.ElementConverter" /> delegate for the AttachShadow method.</returns>
      <param name="type">The type, potentially an array or pointer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.GetTargetObject(System.Object)">
      <summary>Static function that will be used with <see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.TransferArray(System.Array,System.Type,Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.ElementConverter)" /> for deep array copy with unshadowing the real target <see cref="T:System.Type" /> objects.</summary>
      <returns>If <paramref name="Source" /> is a shadow, returns the underlying target <see cref="T:System.Type" />; otherwise returns <paramref name="Source" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.GetTargetType(System.Type)">
      <summary>Returns the target <see cref="T:System.Type" /> for a potential shadow class. </summary>
      <returns>Returns the target <see cref="T:System.Type" /> for a potential shadow class. If the passed type is not a shadow type, it returns the same type.</returns>
      <param name="type">The type to examine.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.m_privateObject">
      <summary>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> stored in this instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.MakeArrayType(System.Type,System.Int32)">
      <summary>Returns a <see cref="T:System.Type" /> object that represents an array of the specified type, with the specified number of dimensions.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents an array of the specified type, with the specified number of dimensions.</returns>
      <param name="elementType">The element type for the array.</param>
      <param name="rank">The number of dimensions for the array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.MakeByRefType(System.Type)">
      <summary>Returns a <see cref="T:System.Type" /> object that represents the specified type when it is passed as a ref parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the current type when it is passed as a ref parameter.</returns>
      <param name="elementType">The element type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.MakePointerType(System.Type)">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a pointer to the specified type.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents a pointer to the specified type.</returns>
      <param name="elementType">The element type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.Same(System.Object)">
      <summary>Dummy method used to transfer the arrays of the same <see cref="T:System.Type" />. This is the failsafe implementation of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.ElementConverter" /> delegate used for arrays of the same type.</summary>
      <returns>Returns the <paramref name="source" /> object.</returns>
      <param name="source">The source object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.Target">
      <summary>Gets the target object.</summary>
      <returns>The stored object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow" /> object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.TransferArray(System.Array,System.Type,Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.ElementConverter)">
      <summary>Performs a deep copy of an array of one <see cref="T:System.Type" /> into a similar array of different <see cref="T:System.Type" />.</summary>
      <returns>An array with the same characteristics (rank and dimension limitations) as the original array.</returns>
      <param name="source">The source array.</param>
      <param name="targetType">The type of the target array.</param>
      <param name="converter">The method which performs the conversion between the elements of the arrays.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.ElementConverter">
      <summary>Delegate used for deep copying of arrays. Converts the source element of an array into the target element.</summary>
      <returns>The target element of the deep copy.</returns>
      <param name="source">The source element to deep copy.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.BeforeAssemblyCleanupEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeAssemblyCleanup" /> event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.BeforeAssemblyInitializeEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeAssemblyInitialize" /> event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.BeforeClassCleanupEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeClassCleanup" /> event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.BeforeClassInitializeEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeClassInitialize" /> event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.BeforeTestCleanupEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeTestCleanup" /> event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.BeforeTestInitializeEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeTestInitialize" /> event.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute">
      <summary>Identifies a method that contains code to be used after all the tests in the test class have run and to free resources obtained by the test class. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute">
      <summary>Identifies a method that contains code that must be used before any of the tests in the test class have run and to allocate resources to be used by the test class. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert">
      <summary>Verifies true/false propositions associated with collections in unit tests.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type)">
      <summary>Verifies that all elements in the specified collection are instances of the specified type. The assertion fails if for any element the type is not found in its inheritance hierarchy.</summary>
      <param name="collection">The collection to verify.</param>
      <param name="expectedType">The type expected to be found in the inheritance hierarchy of every element in <paramref name="collection" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="collection" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of all elements  in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String)">
      <summary>Verifies that all elements in the specified collection are instances of the specified type. The assertion fails if there exists one element in the collection for which the specified type is not found in its inheritance hierarchy. Displays a message if the assertion fails.</summary>
      <param name="collection">The collection to verify.</param>
      <param name="expectedType">The type expected to be found in the inheritance hierarchy of every element in <paramref name="collection" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="collection" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of all elements in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String,System.Object[])">
      <summary>Verifies that all elements in the specified collection are instances of the specified type. The assertion fails if there exists one element in the collection for which the specified type is not found in its inheritance hierarchy. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="collection">The collection to verify.</param>
      <param name="expectedType">The type expected to be found in the inheritance hierarchy of every element in <paramref name="collection" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="collection" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of all elements in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection)">
      <summary>Verifies that all items in the specified collection are not null. The assertion fails if any element is null.</summary>
      <param name="collection">The collection in which to search for elements that are null.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element which is null is found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String)">
      <summary>Verifies that all items in the specified collection are not null. The assertion fails if any element is null. Displays a message if the assertion fails.</summary>
      <param name="collection">The collection in which to search for elements that are null.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element which is null is found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String,System.Object[])">
      <summary>Verifies that all items in the specified collection are not null. The assertion fails if any element is null. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="collection">The collection in which to search for elements that are null.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element which is null is found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection)">
      <summary>Verifies that all items in the specified collection are unique. The assertion fails if any two elements in the collection are equal.</summary>
      <param name="collection">The collection in which to search for duplicate elements.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Two or more equal elements are found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String)">
      <summary>Verifies that all items in the specified collection are unique. The assertion fails if any two elements in the collection are equal. Displays a message if the assertion fails.</summary>
      <param name="collection">The collection in which to search for duplicate elements.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Two or more equal elements are found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String,System.Object[])">
      <summary>Verifies that all items in the specified collection are unique. The assertion fails if any two elements in the collection are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="collection">The collection in which to search for duplicate elements.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Two or more equal elements are found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that two specified collections are equal. The assertion fails if the collections are not equal.</summary>
      <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
      <summary>Verifies that two specified collections are equal, using the specified method to compare the values of elements. The assertion fails if the collections are not equal.</summary>
      <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
      <summary>Verifies that two specified collections are equal, using the specified method to compare the values of elements. The assertion fails if the collections are not equal. Displays a message if the assertion fails.</summary>
      <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
      <summary>Verifies that two specified collections are equal, using the specified method to compare the values of elements. The assertion fails if the collections are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Verifies that two specified collections are equal. The assertion fails if the collections are not equal. Displays a message if the assertion fails.</summary>
      <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Verifies that two specified collections are equal. The assertion fails if the collections are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that two specified collections are equivalent. The assertion fails if the collections are not equivalent.</summary>
      <param name="expected">The first collection to compare. This contains the elements the unit test expects.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element was found in one of the collections but not in the other.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Verifies that two specified collections are equivalent. The assertion fails if the collections are not equivalent. Displays a message if the assertion fails.</summary>
      <param name="expected">The first collection to compare. This contains the elements the unit test expects.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element was found in one of the collections but not in the other.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Verifies that two specified collections are equivalent. The assertion fails if the collections are not equivalent. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="expected">The first collection to compare. This contains the elements the unit test expects.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element was found in one of the collections but not the other.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that two specified collections are not equal. The assertion fails if the collections are equal.</summary>
      <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
      <summary>Verifies that two specified collections are not equal, using the specified method to compare the values of elements. The assertion fails if the collections are equal.</summary>
      <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
      <summary>Verifies that two specified collections are not equal, using the specified method to compare the values of elements. The assertion fails if the collections are equal. Displays a message if the assertion fails.</summary>
      <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
      <summary>Verifies that two specified collections are not equal, using the specified method to compare the values of elements. The assertion fails if the collections are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Verifies that two specified collections are not equal. The assertion fails if the collections are equal. Displays a message if the assertion fails.</summary>
      <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Verifies that two specified collections are not equal. The assertion fails if the collections are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is equal to <paramref name="actual" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that two specified collections are not equivalent. The assertion fails if the collections are equivalent.</summary>
      <param name="expected">The first collection to compare. This contains the elements the unit test expects to be different from the actual collection.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">The two collections contain the same elements, including the same number of duplicate occurrences of each element.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Verifies that two specified collections are not equivalent. The assertion fails if the collections are equivalent. Displays a message if the assertion fails.</summary>
      <param name="expected">The first collection to compare. This contains the elements the unit test expects to be different from the actual collection.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">The two collections contain the same elements, including the same number of duplicate occurrences of each element.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Verifies that two specified collections are not equivalent. The assertion fails if the collections are equivalent. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="expected">The first collection to compare. This contains the elements the unit test expects to be different from the actual collection.</param>
      <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">The two collections contain the same elements, including the same number of duplicate occurrences of each element.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object)">
      <summary>Verifies that the specified collection contains the specified element. The assertion fails if the element is not found in the collection.</summary>
      <param name="collection">The collection in which to search for the element.</param>
      <param name="element">The element that is expected to be in the collection.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="element" /> is not found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String)">
      <summary>Verifies that the specified collection contains the specified element. The assertion fails if the element is not found in the collection. Displays a message if the assertion fails.</summary>
      <param name="collection">The collection in which to search for the element.</param>
      <param name="element">The element that is expected to be in the collection.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="element" /> is not found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String,System.Object[])">
      <summary>Verifies that the specified collection contains the specified element. The assertion fails if the element is not found in the collection. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="collection">The collection in which to search for the element.</param>
      <param name="element">The element that is expected to be in the collection.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="element" /> is not found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object)">
      <summary>Verifies that the specified collection does not contain the specified element. The assertion fails if the element is found in the collection.</summary>
      <param name="collection">The collection in which to search for the element.</param>
      <param name="element">The element that is not expected to be in the collection.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="element" /> is found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String)">
      <summary>Verifies that the specified collection does not contain the specified element. The assertion fails if the element is found in the collection. Displays a message if the assertion fails.</summary>
      <param name="collection">The collection in which to search for the element.</param>
      <param name="element">The element that is not expected to be in the collection.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="element" /> is found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String,System.Object[])">
      <summary>Verifies that the specified collection does not contain the specified element. The assertion fails if the element is found in the collection. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="collection">The collection in which to search for the element.</param>
      <param name="element">The element that is not expected to be in the collection.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="element" /> is found in <paramref name="collection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that the first collection is not a subset of the second collection.</summary>
      <param name="subset">The collection not expected to be a subset of <paramref name="superset" />.</param>
      <param name="superset">The collection not expected to be a superset of <paramref name="subset" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">All elements in <paramref name="subset" /> are found in <paramref name="superset" /> and are found in sufficient quantity.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Verifies that the first collection is not a subset of the second collection. Displays a message if the assertion fails.</summary>
      <param name="subset">The collection not expected to be a subset of <paramref name="superset" />.</param>
      <param name="superset">The collection not expected to be a superset of <paramref name="subset" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">All elements in <paramref name="subset" /> are found in <paramref name="superset" /> and are found in sufficient quantity.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Verifies that the first collection is not a subset of the second collection. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="subset">The collection not expected to be a subset of <paramref name="superset" />.</param>
      <param name="superset">The collection not expected to be a superset of <paramref name="subset" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">All elements in <paramref name="subset" /> are found in <paramref name="superset" /> and are found in sufficient quantity.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that the first collection is a subset of the second collection.</summary>
      <param name="subset">The collection expected to be a subset of <paramref name="superset" />.</param>
      <param name="superset">The collection expected to be a superset of <paramref name="subset" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="subset" /> is not found in <paramref name="superset" /> or an element in <paramref name="subset" /> is not found in <paramref name="superset" /> in sufficient quantity.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Verifies that the first collection is a subset of the second collection. Displays a message if the assertion fails.</summary>
      <param name="subset">The collection expected to be a subset of <paramref name="superset" />.</param>
      <param name="superset">The collection expected to be a superset of <paramref name="subset" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="subset" /> is not found in <paramref name="superset" /> or an element in <paramref name="subset" /> is not found in <paramref name="superset" /> in sufficient quantity.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Verifies that the first collection is a subset of the second collection. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="subset">The collection expected to be a subset of <paramref name="superset" />.</param>
      <param name="superset">The collection expected to be a superset of <paramref name="subset" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="subset" /> is not found in <paramref name="superset" /> or an element in <paramref name="subset" /> is not found in <paramref name="superset" /> in sufficient quantity.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute">
      <summary>Represents the project iteration to which this test corresponds. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute" /> class. </summary>
      <param name="cssIteration">A string that identifies the corresponding project iteration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.CssIteration">
      <summary>Gets the iteration identifier for the test.</summary>
      <returns>An iteration identifier.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute">
      <summary>Represents the node in the team project hierarchy to which this test corresponds. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute" /> class. </summary>
      <param name="cssProjectStructure">A string that identifies the corresponding project feature.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute.CssProjectStructure">
      <summary>Gets the project feature identifier for the test.</summary>
      <returns>A project feature identifier.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod">
      <summary>Specifies constants that indicate how data rows are accessed in data-driven testing. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Sequential">
      <summary>Rows are returned in a sequential order.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Random">
      <summary>Rows are returned in a random order.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute">
      <summary>Provides data source-specific information for data-driven testing. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute" /> class.  This instance will be initialized with a data provider and connection string associated with the setting name.</summary>
      <param name="dataSourceSettingName">The name of a data source found in the &lt;microsoft.visualstudio.qualitytools&gt; section in the app.config file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute" /> class. This instance will be initialized with a connection string and table name.</summary>
      <param name="connectionString">Data provider-specific connection string. </param>
      <param name="tableName">The name of the data table.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute" /> class.  This instance will be initialized with a data provider, connection string, data table and data access method to access the data source.</summary>
      <param name="providerInvariantName">Invariant data provider name, such as System.Data.SqlClient.</param>
      <param name="connectionString">A data provider-specific connection string. </param>
      <param name="tableName">The name of the data table.</param>
      <param name="dataAccessMethod">Specifies the order to access data.  It takes a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.ConnectionString">
      <summary>Gets a value representing the connection string for the data source.</summary>
      <returns>The connection string used to access the data source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DataAccessMethod">
      <summary>Gets the method used to access the data source.</summary>
      <returns>One of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod" /> values. If the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute" /> is not initialized, this will return the default value <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Random" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DataSourceSettingName">
      <summary>Gets a value indicating the setting name used to identify data source connection information stored in a configuration file.</summary>
      <returns>The name of a data source found in the &lt;microsoft.visualstudio.qualitytools&gt; section in the app.config file.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DefaultDataAccessMethod">
      <summary>Represents the default data access method. This field is read-only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DefaultProviderName">
      <summary>Represents the default data provider name. This field is read-only.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.ProviderInvariantName">
      <summary>Gets a value representing the data provider of the data source.</summary>
      <returns>The data provider name. If a data provider was not designated at object initialization, the default provider of System.Data.OleDb will be returned.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.TableName">
      <summary>Gets a value indicating the table name providing data.</summary>
      <returns>The table name providing data for the test.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement">
      <summary>Represents a data source element as an XML tag within a configuration file. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement.ConnectionString">
      <summary>Gets or sets the connection string setting element in the &lt;connectionStrings&gt; section in the app.config file.</summary>
      <returns>A connection string.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement.DataAccessMethod">
      <summary>Gets or sets the data source access method element in the app.config file.</summary>
      <returns>The data source access method.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement.DataTableName">
      <summary>Gets or sets the table name setting element in the app.config file.</summary>
      <returns>A table name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement.Name">
      <summary>Gets or sets the data source name setting element in the app.config file.</summary>
      <returns>A data source name.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection">
      <summary>Represents an XML element that contains a collection of child <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> objects. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Add(Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement)">
      <summary>Adds a data source element to <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection" />.</summary>
      <param name="element">The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> to add to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Clear">
      <summary>Removes all data source element objects from the collection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Item(System.Int32)">
      <summary>Gets or sets a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> at the specified index location.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> object.</returns>
      <param name="index">The location of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Item(System.String)">
      <summary>Gets a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> identified by name.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> object, or null if the <paramref name="name" /> key does not exist.</returns>
      <param name="name">The name of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> to return.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Remove(Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement)">
      <summary>Removes a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> from the collection.</summary>
      <param name="element">The element to remove from the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Remove(System.String)">
      <summary>Removes a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> from the collection.</summary>
      <param name="name">The name of the element to remove.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute">
      <summary>Used to specify deployment items such as files or directories for per-test deployment. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute" /> class. An object that is created with this constructor will be initialized with a path to a deployment item or directory.</summary>
      <param name="path">The relative or absolute path to the deployment item or directory to deploy. All items or directories will be deployed to the directory where the deployed test assemblies reside.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute" /> class. An object that is created with this constructor will be initialized with a path to a deployment item and an output directory.</summary>
      <param name="path">The relative or absolute path to the deployment item or directory to deploy.</param>
      <param name="outputDirectory">The path to the output directory. This contains all items and directories identified by <paramref name="path" />. This directory will be relative to the directory that contains the deployed test assemblies.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute.OutputDirectory">
      <summary>Gets a value that represents the path to the output directory.</summary>
      <returns>A value that represents the directory under the deployment directory that will contain the deployed files and directories.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute.Path">
      <summary>Gets a value that represents the path to the deployment item.</summary>
      <returns>The path to the file or directory to deploy.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute">
      <summary>Used to specify the description of the test. This class cannot be inherited.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute" /> class.</summary>
      <param name="description">A short explanation of the test.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute.Description">
      <summary>Gets the description of the test.</summary>
      <returns>The test description.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute">
      <summary>Indicates that an exception is expected during test method execution. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute" /> class with an expected exception.</summary>
      <param name="exceptionType">An expected type of exception to be thrown by a method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute" /> class with and expected exception type and a message that describes the exception.</summary>
      <param name="exceptionType">An expected type of exception to be thrown by a method.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.AllowDerivedTypes"></member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.ExceptionType">
      <summary>Gets the expected exception type.</summary>
      <returns>A <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute">
      <summary>This is a base class for attributes that specify to expect an exception from a unit test.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute" /> class.</summary>
      <param name="noExceptionMessage">If the test fails because an exception was not thrown, this message is included in the test result.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.NoExceptionMessage"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.RethrowIfAssertException(System.Exception)">
      <summary>Throws the exception again if it is an <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException" /> or an <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException" />.</summary>
      <param name="exception">The exception to throw if it is an assertion exception.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.TestContext"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.Verify(System.Exception)">
      <param name="exception">The exception that is thrown by the unit test.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper">
      <summary>This class is a placeholder for use with generics. It helps you test generic types by letting you pass non-specific type arguments.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> class. This constructor initializes the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Data" /> property to a random value.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> class. This constructor initializes the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Data" /> property to a user specified value.</summary>
      <param name="data">The initial value for the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Data" /> property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Clone">
      <summary>Creates a new <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> that is a copy of the current instance.</summary>
      <returns>A new <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> that is a copy of the current instance.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:Less than zeroThis instance is less than <paramref name="obj" />.ZeroThis instance is equal to <paramref name="obj" />.Greater than zeroThis instance is greater than <paramref name="obj" />.</returns>
      <param name="obj">A <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> to compare with the current instance.</param>
      <exception cref="NotSupportedException">
        <paramref name="obj" /> is not of type <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" />.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Data">
      <summary>Gets or sets the Data property for this instance.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> object is equal to the current <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> object.</summary>
      <returns>true if the specified <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> object is equal to the current <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> object to compare with the current <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetEnumerator">
      <summary>Returns an enumerator whose length is derived from the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Data" /> property.</summary>
      <returns>An enumerator whose length is derived from the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Data" /> property.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> object.</summary>
      <returns>A 32-bit signed integer hash code for this <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper" /> object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute">
      <summary>Specifies the type of host on which the associated unit test will run. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute" /> class. This is instantiated by using an argument that specifies the type of host on which this unit test will run.</summary>
      <param name="hostType">The type of host on which this unit test will run.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute" /> class. This is instantiated by using an argument that specifies the type of host on which this unit test will run, and custom data for the host adapter.</summary>
      <param name="hostType">The type of host on which this unit test will run.</param>
      <param name="hostData">Custom data for the host adapter.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.HostData">
      <summary>Gets custom data for the host adapter.</summary>
      <returns>Custom data for the host adapter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.HostType">
      <summary>Gets a value that represents the type of host.</summary>
      <returns>A value that represents the type of host.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute">
      <summary>Indicates that a specific test should not be run.  This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute" /> class. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException">
      <summary>The exception that is thrown to indicate an internal failure for a test.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException" /> class without arguments.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException" /> class with serialized data. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException" /> class with a specified error message. </summary>
      <param name="msg">The error message string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="msg">The error message that explains the reason for the exception. </param>
      <param name="ex">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethodInvoker">
      <summary>Interface to invoke the test method body.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethodInvoker.Invoke(System.Object[])">
      <summary>Invokes a test method by using the provided parameters.</summary>
      <returns>The result of the test method invocation.</returns>
      <param name="parameters">Optional parameter that is passed to the invoker.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.OnTestStoppingEventArgs">
      <summary>Occurs when a test is stopped before it is completed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute">
      <summary>Used to specify the person responsible for maintaining, running, and/or debugging the test. This class cannot be inherited.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute" /> class that uses an owner name.</summary>
      <param name="owner">The owner of the test.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute.Owner">
      <summary>Gets the owner of the test.</summary>
      <returns>The owner of the test.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute">
      <summary>Used to specify the priority of a unit test.  This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute" /> class that has a priority value. </summary>
      <param name="priority">An integer that represents the priority value for the test.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute.Priority">
      <summary>Gets the priority value.</summary>
      <returns>An integer that represents the priority value for the test.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject">
      <summary>Allows test code to call methods and properties on the code under test that would be inaccessible because they are not public.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class that creates the wrapper for the specified object.</summary>
      <param name="obj">The object to wrap.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Object,Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class that creates the wrapper for the specified object. </summary>
      <param name="obj">The object to wrap.</param>
      <param name="type">The wrapped object type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class that creates the wrapper for the specified object.  </summary>
      <param name="obj">The object to wrap. This serves as starting point to reach the private members.</param>
      <param name="memberToAccess">The dereferencing string that points to the object to be retrieved. This takes the form of "objectX.objectY.objectZ".</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="memberToAccess" /> is a zero-length string</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null or <paramref name="memberToAccess" /> is null</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.String,System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class. This creates the object of the specified type and wraps it in the private object.</summary>
      <param name="assemblyName">Name of the assembly that contains the type.</param>
      <param name="typeName">Fully qualified name of the type.</param>
      <param name="args">Arguments to pass to the constructor of the object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> or <paramref name="typeName" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.String,System.String,System.Type[],System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class. This creates an object of the specified type and wraps it in the private object.</summary>
      <param name="assemblyName">Name of the assembly that contains the type.</param>
      <param name="typeName">Fully qualified name of the type.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for constructing the object.</param>
      <param name="args">The arguments to define the object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> or <paramref name="typeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> is multidimensional.-or-A constructor cannot be found to match the parameters specified in <see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Type,System.Type[],System.Object[])" />. </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Type,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class that creates the wrapper for the specified object.</summary>
      <param name="type">The wrapped object type.</param>
      <param name="args">The arguments to define the object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a RuntimeType.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.-or-Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, and <see cref="T:System.RuntimeArgumentHandle" /> types is not supported.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found to match the <paramref name="type" /> and <paramref name="args" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Type,System.Type[],System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class. </summary>
      <param name="type">The wrapped object type.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for constructing the object.</param>
      <param name="args">The arguments to define the object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> is multidimensional.-or-A constructor cannot be found to match the parameters specified in <see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Type,System.Type[],System.Object[])" />. </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Equals(System.Object)">
      <summary>Returns a value that indicates whether two private objects are encapsulating the same target object.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetArrayElement(System.String,System.Int32[])">
      <summary>Gets the array element by using an array of subscripts for each dimension.</summary>
      <returns>An object that represents the array element.</returns>
      <param name="name">The variable name of array to get.</param>
      <param name="indices">An array that represents the location of the element to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetArrayElement(System.String,System.Reflection.BindingFlags,System.Int32[])">
      <summary>Gets the array element by using an array of subscripts for each dimension.</summary>
      <returns>An object representing the array element.</returns>
      <param name="name">The variable name of array to get.</param>
      <param name="indices">An array representing the location of the element to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetField(System.String)">
      <summary>Gets a value from a named field, based on the name.</summary>
      <returns>The value set for the <paramref name="name" /> field.</returns>
      <param name="name">The name of the private field to get.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a value from a named field, based on the name and lookup mask.</summary>
      <returns>The value set for the <paramref name="name" /> field.</returns>
      <param name="name">The name of the private field to get.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetFieldOrProperty(System.String)">
      <summary>Gets a value of a wrapped field or property based on the name.</summary>
      <returns>The value set for the <paramref name="name" /> field or property.</returns>
      <param name="name">The name of the private field or property to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetFieldOrProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a value of a wrapped field or property based on the name.</summary>
      <returns>The value set for the <paramref name="name" /> field or property.</returns>
      <param name="name">The name of the private field or property to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetHashCode">
      <summary>Gets the hash code of the wrapped object.</summary>
      <returns>An integer that represents the hash code of the wrapped object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetProperty(System.String,System.Object[])">
      <summary>Gets a property for a wrapped object identified by name.</summary>
      <returns>An object that contains the value of the property identified by <paramref name="name" />.</returns>
      <param name="name">The name of property to get.</param>
      <param name="args">An array that contains the arguments to pass to the member to invoke.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Object[])">
      <summary>Gets a property for a wrapped object identified by name with binding flags.</summary>
      <returns>An object that contains the value of the property identified by <paramref name="name" />.</returns>
      <param name="name">The name of property to get.</param>
      <param name="args">An array that contains the arguments to pass to the member to invoke.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[])">
      <summary>Gets an indexed property for a wrapped object identified by name.</summary>
      <returns>An object that contains the value of the property identified by <paramref name="name" />.</returns>
      <param name="name">The name of property to get.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the indexed property to get.</param>
      <param name="args">An array that contains the arguments to pass to the member to invoke.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetProperty(System.String,System.Type[],System.Object[])">
      <summary>Gets a property for a wrapped object identified by name.</summary>
      <returns>An object that contains the value of the property identified by <paramref name="name" />.</returns>
      <param name="name">The name of property to get.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</param>
      <param name="args">An array that contains the arguments to pass to the member to invoke.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Object[])">
      <summary>Used to access the members of the private object.</summary>
      <returns>An object that represents the return value of a private member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="args">Any arguments that the member requires.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Object[],System.Globalization.CultureInfo)">
      <summary>Used to access the members of the private object.</summary>
      <returns>An object that represents the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="args">Any arguments that the member requires.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or-null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Reflection.BindingFlags,System.Object[])">
      <summary>Used to access the members of the private object.</summary>
      <returns>An object that represents the return value of a private member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="args">Any arguments that the member requires.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Reflection.BindingFlags,System.Object[],System.Globalization.CultureInfo)">
      <summary>Used to access the members of the private object.</summary>
      <returns>An object representing the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="args">Any arguments that the member requires.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or-null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[])">
      <summary>Used to access the members of the private object.</summary>
      <returns>An object that represents the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.-or-An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</param>
      <param name="args">Any arguments that the member requires.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[],System.Globalization.CultureInfo)">
      <summary>Used to access the members of the private object.</summary>
      <returns>An object representing the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.-or-An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</param>
      <param name="args">Any arguments that the member requires.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or-null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[],System.Globalization.CultureInfo,System.Type[])">
      <summary>Used to access generic members of a private object.</summary>
      <param name="name">The name of the member to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.-or-An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</param>
      <param name="args">Any arguments that the member requires.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or-null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
      <param name="typeArguments">An array of type arguments to use when invoking a generic method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Type[],System.Object[])">
      <summary>Used to access the methods of the private object.</summary>
      <returns>An object that represents the return value of the invoked method.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.-or-An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</param>
      <param name="args">Any arguments that the member requires.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Type[],System.Object[],System.Globalization.CultureInfo)">
      <summary>Used to access the members of the private object.</summary>
      <returns>An object representing the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.-or-An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</param>
      <param name="args">Any arguments that the member requires.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or-null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Type[],System.Object[],System.Type[])">
      <summary>Used to access generic members of a private object. </summary>
      <param name="name">The name of the member to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.-or-An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</param>
      <param name="args">Any arguments that the member requires.</param>
      <param name="typeArguments">An array of type arguments to use when invoking a generic method.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.RealType">
      <summary>Gets the type of the underlying object.</summary>
      <returns>A <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetArrayElement(System.String,System.Object,System.Int32[])">
      <summary>Sets the array element by using an array of subscripts for each dimension.</summary>
      <param name="name">The variable name of array to set.</param>
      <param name="value">The value to assign to the array element.</param>
      <param name="indices">An array that represents the location of the element to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetArrayElement(System.String,System.Reflection.BindingFlags,System.Object,System.Int32[])">
      <summary>Sets the array element by using an array of subscripts for each dimension.</summary>
      <param name="name">The variable name of array to set.</param>
      <param name="value">The value to assign to the array element.</param>
      <param name="indices">An array that represents the location of the element to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetField(System.String,System.Object)">
      <summary>Sets a value for the field of the wrapped object, identified by name.</summary>
      <param name="name">The name of the field to set a value.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetField(System.String,System.Reflection.BindingFlags,System.Object)">
      <summary>Sets a value for the field of the wrapped object, identified by name.</summary>
      <param name="name">The name of the field to set a value.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetFieldOrProperty(System.String,System.Object)">
      <summary>Sets a value of a wrapped field or property based on the name.</summary>
      <param name="name">The name of the private field or property to set.</param>
      <param name="value">The value to set for <paramref name="name" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetFieldOrProperty(System.String,System.Reflection.BindingFlags,System.Object)">
      <summary>Sets a value of a wrapped field or property based on the name.</summary>
      <param name="name">The name of the private field or property to set.</param>
      <param name="value">The value to set for <paramref name="name" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetProperty(System.String,System.Object,System.Object[])">
      <summary>Sets a property for a wrapped object identified by name.</summary>
      <param name="name">The name of property to invoke.</param>
      <param name="value">The value to set the property identified by <paramref name="name" />.</param>
      <param name="args">An array that contains the arguments to pass to the property to invoke.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetProperty(System.String,System.Reflection.BindingFlags,System.Object,System.Object[])">
      <summary>Sets a property for a wrapped object identified by name with binding flags.</summary>
      <param name="name">The name of property to invoke.</param>
      <param name="value">The value to set the property identified by <paramref name="name" />.</param>
      <param name="args">An array that contains the arguments to pass to the property to invoke.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetProperty(System.String,System.Reflection.BindingFlags,System.Object,System.Type[],System.Object[])">
      <summary>Sets an indexed property for a wrapped object identified by name.</summary>
      <param name="name">The name of property to invoke.</param>
      <param name="value">The value to set the property identified by <paramref name="name" />.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the indexed property to get.</param>
      <param name="args">An array that contains the arguments to pass to the property to invoke.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetProperty(System.String,System.Type[],System.Object,System.Object[])">
      <summary>Sets an indexed property for a wrapped object identified by name.</summary>
      <param name="name">The name of property to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the indexed property to get.</param>
      <param name="value">The value to set the property identified by <paramref name="name" />.</param>
      <param name="args">An array that contains the arguments to pass to the property to invoke.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Target">
      <summary>Gets or sets the wrapped object.</summary>
      <returns>The wrapped object.</returns>
      <exception cref="T:System.ArgumentNullException">Try to set this property to null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType">
      <summary>Represents the type of a private class that gives access to private static implementations.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" /> class. </summary>
      <param name="assemblyName">assembly name</param>
      <param name="typeName">fully qualified name of the type</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> or <paramref name="typeName" /> is null or empty.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" /> class with the type information.</summary>
      <param name="type">The wrapped <see cref="T:System.Type" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.GetStaticArrayElement(System.String,System.Int32[])">
      <summary>Gets a static array element contained in the wrapped type.</summary>
      <returns>An object that represents an element of <paramref name="name" /> at the location specified with <paramref name="indices" />.</returns>
      <param name="name">The name of the array</param>
      <param name="indices">An array of subscripts for identifying the element to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.GetStaticArrayElement(System.String,System.Reflection.BindingFlags,System.Int32[])">
      <summary>Gets a static array element contained in the wrapped type.</summary>
      <returns>An object that represents an element of <paramref name="name" /> at the location specified with <paramref name="indices" />.</returns>
      <param name="name">The name of the array</param>
      <param name="indices">An array of subscripts for identifying the element to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.GetStaticField(System.String)">
      <summary>Gets a static field contained in the wrapped type.</summary>
      <returns>An object that represents the value of the static field.</returns>
      <param name="name">The name of the static field.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.GetStaticField(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a static field contained in the wrapped type.</summary>
      <returns>An object that represents the value of the static field.</returns>
      <param name="name">The name of the static field.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.GetStaticFieldOrProperty(System.String)">
      <summary>Gets a value of a static field or property in a wrapped type based on the name.</summary>
      <returns>The value set for the <paramref name="name" /> field or property.</returns>
      <param name="name">The name of the static field or property to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.GetStaticFieldOrProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a value of a static field or property in a wrapped type based on the name.</summary>
      <returns>The value set for the <paramref name="name" /> field or property.</returns>
      <param name="name">The name of the static field or property to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.GetStaticProperty(System.String,System.Object[])">
      <summary>Gets a static property contained in the wrapped type.</summary>
      <returns>An object that represents the value of the static property.</returns>
      <param name="name">The name of the static property.</param>
      <param name="args">An array that contains the arguments to pass to the member to invoke.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.GetStaticProperty(System.String,System.Reflection.BindingFlags,System.Object[])">
      <summary>Gets a static property contained in the wrapped type.</summary>
      <returns>An object that represents the value of the static property.</returns>
      <param name="name">The name of the static property.</param>
      <param name="args">An array that contains the arguments to pass to the member to invoke.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.GetStaticProperty(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[])">
      <summary>Gets a static indexed property contained in the wrapped type.</summary>
      <returns>An object that represents the value of the static indexed property.</returns>
      <param name="name">The name of the static property.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
      <param name="args">An array that contains the arguments to pass to the member to invoke.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.InvokeStatic(System.String,System.Object[])">
      <summary>Invokes static methods on the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" />.</summary>
      <returns>An object that represents the invoked static method's return value, if any.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="args">Any array of arguments to pass</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.InvokeStatic(System.String,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes static methods on the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" />.</summary>
      <returns>An object that represents the invoked static method's return value, if any.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="args">Any array of arguments to pass</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or-null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.InvokeStatic(System.String,System.Reflection.BindingFlags,System.Object[])">
      <summary>Invokes static methods on the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" />.</summary>
      <returns>An object that represents the invoked static method's return value, if any.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="args">Any array of arguments to pass</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.InvokeStatic(System.String,System.Reflection.BindingFlags,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes static methods on the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" />.</summary>
      <returns>An object representing the invoked static method's return value, if any.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="args">An array of arguments to pass.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or-null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.InvokeStatic(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[])">
      <summary>Invokes static methods on the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" />.</summary>
      <returns>An object that represents the invoked static method's return value, if any.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method.-or- An empty array of the type Type, that is, Type[] types = new Type[0] to get a method that takes no parameters.</param>
      <param name="args">An array of arguments to pass.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.InvokeStatic(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes static methods on the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" />.</summary>
      <returns>An object representing the invoked static method's return value, if any.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method.-or- An empty array of the type Type, that is, Type[] types = new Type[0] to get a method that takes no parameters.</param>
      <param name="args">An array of arguments to pass.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or-null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.InvokeStatic(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[],System.Globalization.CultureInfo,System.Type[])">
      <summary>Invokes static methods on the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" />.</summary>
      <param name="name">The name of the method to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method.-or- An empty array of the type Type, that is, Type[] types = new Type[0] to get a method that takes no parameters.</param>
      <param name="args">An array of arguments to pass.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or-null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
      <param name="typeArguments">An array of type arguments to use when invoking a generic method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.InvokeStatic(System.String,System.Type[],System.Object[])">
      <summary>Invokes static methods on the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" />.</summary>
      <returns>An object that represents the invoked static method's return value, if any.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method.-or- An empty array of the type Type, that is, Type[] types = new Type[0] to get a method that takes no parameters.</param>
      <param name="args">An array of arguments to pass</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.InvokeStatic(System.String,System.Type[],System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes static methods on the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" />.</summary>
      <returns>An object that represents the invoked static method's return value, if any.</returns>
      <param name="name">The name of the method to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method.-or- An empty array of the type Type, that is, Type[] types = new Type[0] to get a method that takes no parameters.</param>
      <param name="args">An array of arguments to pass.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or-null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.InvokeStatic(System.String,System.Type[],System.Object[],System.Type[])">
      <summary>Invokes static methods on the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" />.</summary>
      <param name="name">The name of the method to invoke.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method.-or- An empty array of the type Type, that is, Type[] types = new Type[0] to get a method that takes no parameters.</param>
      <param name="args">An array of arguments to pass.</param>
      <param name="typeArguments">An array of type arguments to use when invoking a generic method.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.ReferencedType">
      <summary>Gets the <see cref="T:System.Type" /> representing the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType" />.</summary>
      <returns>A <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.SetStaticArrayElement(System.String,System.Object,System.Int32[])">
      <summary>Sets a static array element contained in the wrapped type.</summary>
      <param name="name">The name of the array</param>
      <param name="value">The value to set the element identified by <paramref name="indices" />.</param>
      <param name="indices">An array of subscripts for identifying the element to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.SetStaticArrayElement(System.String,System.Reflection.BindingFlags,System.Object,System.Int32[])">
      <summary>Sets a static array element contained in the wrapped type.</summary>
      <param name="name">The name of the array</param>
      <param name="value">The value to set the element identified by <paramref name="indices" />.</param>
      <param name="indices">An array of subscripts for identifying the element to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.SetStaticField(System.String,System.Object)">
      <summary>Sets a static field contained in the wrapped type.</summary>
      <param name="name">The name of the static field.</param>
      <param name="value">The value to set to the static field.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.SetStaticField(System.String,System.Reflection.BindingFlags,System.Object)">
      <summary>Sets a static field contained in the wrapped type.</summary>
      <param name="name">The name of the static field.</param>
      <param name="value">The value to set to the static field.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.SetStaticFieldOrProperty(System.String,System.Object)">
      <summary>Sets a static field or property contained in the wrapped type.</summary>
      <param name="name">The name of the static field or property.</param>
      <param name="value">The value to set to the static field or property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.SetStaticFieldOrProperty(System.String,System.Reflection.BindingFlags,System.Object)">
      <summary>Sets a static field or property contained in the wrapped type.</summary>
      <param name="name">The name of the static field or property.</param>
      <param name="value">The value to set to the static field or property.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.SetStaticProperty(System.String,System.Object,System.Object[])">
      <summary>Sets a static property contained in the wrapped type.</summary>
      <param name="name">The name of the static property.</param>
      <param name="value">The value to set the static property.</param>
      <param name="args">An array that contains the arguments to pass to the member to invoke.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.SetStaticProperty(System.String,System.Object,System.Type[],System.Object[])">
      <summary>Sets a static property contained in the wrapped type.</summary>
      <param name="name">The name of the static property.</param>
      <param name="value">The value to set the static property.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the indexed property to set.-or-An empty array of the type <see cref="T:System.Type" />, that is, Type[] types = new Type[0] to set a property that is not indexed.</param>
      <param name="args">An array that contains the arguments to pass to the member to invoke.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.SetStaticProperty(System.String,System.Reflection.BindingFlags,System.Object,System.Object[])">
      <summary>Sets a static property contained in the wrapped type.</summary>
      <param name="name">The name of the static property.</param>
      <param name="value">The value to set the static property.</param>
      <param name="args">An array that contains the arguments to pass to the member to invoke.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType.SetStaticProperty(System.String,System.Reflection.BindingFlags,System.Object,System.Type[],System.Object[])">
      <summary>Sets a static property contained in the wrapped type.</summary>
      <param name="name">The name of the static property.</param>
      <param name="value">The value to set the static property.</param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the indexed property to set.-or- An empty array of the type <see cref="T:System.Type" />, that is, Type[] types = new Type[0] to set a property that is not indexed.</param>
      <param name="args">An array that contains the arguments to pass to the member to invoke.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ShadowingAttribute">
      <summary>Do not use this class. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ShadowingAttribute.#ctor(System.String)"></member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ShadowingAttribute.FullNameOfSource"></member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert">
      <summary>Verifies true/false propositions associated with strings in unit tests.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String)">
      <summary>Verifies that the first string contains the second string. This method is case sensitive.</summary>
      <param name="value">The string that is expected to contain <paramref name="substring" />.</param>
      <param name="substring">The string expected to occur within <paramref name="value" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="substring" /> is not found in <paramref name="value" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String)">
      <summary>Verifies that the first string contains the second string. Displays a message if the assertion fails. This method is case sensitive.</summary>
      <param name="value">The string that is expected to contain <paramref name="substring" />.</param>
      <param name="substring">The string expected to occur within <paramref name="value" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="substring" /> is not found in <paramref name="value" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that the first string contains the second string. Displays a message if the assertion fails, and applies the specified formatting to it. This method is case sensitive.</summary>
      <param name="value">The string that is expected to contain <paramref name="substring" />.</param>
      <param name="substring">The string expected to occur within <paramref name="value" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="substring" /> is not found in <paramref name="value" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Verifies that the specified string does not match the regular expression.</summary>
      <param name="value">The string that is not expected to match <paramref name="pattern" />.</param>
      <param name="pattern">The regular expression that <paramref name="value" /> is not expected to match.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> matches <paramref name="pattern" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
      <summary>Verifies that the specified string does not match the regular expression. Displays a message if the assertion fails.</summary>
      <param name="value">The string that is not expected to match <paramref name="pattern" />.</param>
      <param name="pattern">The regular expression that <paramref name="value" /> is not expected to match.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> matches <paramref name="pattern" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>Verifies that the specified string does not match the regular expression. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="value">The string that is not expected to match <paramref name="pattern" />.</param>
      <param name="pattern">The regular expression that <paramref name="value" /> is not expected to match.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> matches <paramref name="pattern" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String)">
      <summary>Verifies that the first string ends with the second string. This method is case sensitive.</summary>
      <param name="value">The string that is expected to end with <paramref name="substring" />.</param>
      <param name="substring">The string expected to be a suffix of <paramref name="value" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not end with <paramref name="substring" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String)">
      <summary>Verifies that the first string ends with the second string. Displays a message if the assertion fails. This method is case sensitive.</summary>
      <param name="value">The string that is expected to end with <paramref name="substring" />.</param>
      <param name="substring">The string expected to be a suffix of <paramref name="value" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not end with <paramref name="substring" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that the first string ends with the second string. Displays a message if the assertion fails, and applies the specified formatting to it. This method is case sensitive.</summary>
      <param name="value">The string that is expected to end with <paramref name="substring" />.</param>
      <param name="substring">The string expected to be a suffix of <paramref name="value" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not end with <paramref name="substring" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Verifies that the specified string matches the regular expression.</summary>
      <param name="value">The string that is expected to match <paramref name="pattern" />.</param>
      <param name="pattern">The regular expression that <paramref name="value" /> is expected to match.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not match <paramref name="pattern" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String)">
      <summary>Verifies that the specified string matches the regular expression. Displays a message if the assertion fails.</summary>
      <param name="value">The string that is expected to match <paramref name="pattern" />.</param>
      <param name="pattern">The regular expression that <paramref name="value" /> is expected to match.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not match <paramref name="pattern" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>Verifies that the specified string matches the regular expression. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
      <param name="value">The string that is expected to match <paramref name="pattern" />.</param>
      <param name="pattern">The regular expression that <paramref name="value" /> is expected to match.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not match <paramref name="pattern" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String)">
      <summary>Verifies that the first string begins with the second string. This method is case sensitive.</summary>
      <param name="value">The string that is expected to begin with <paramref name="substring" />.</param>
      <param name="substring">The string expected to be a prefix of <paramref name="value" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not begin with <paramref name="substring" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String)">
      <summary>Verifies that the first string begins with the second string. Displays a message if the assertion fails.  This method is case sensitive.</summary>
      <param name="value">The string that is expected to begin with <paramref name="substring" />.</param>
      <param name="substring">The string expected to be a prefix of <paramref name="value" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not begin with <paramref name="substring" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that the first string begins with the second string. Displays a message if the assertion fails, and applies the specified formatting to it. This method is case sensitive.</summary>
      <param name="value">The string that is expected to begin with <paramref name="substring" />.</param>
      <param name="substring">The string expected to be a prefix of <paramref name="value" />.</param>
      <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
      <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not begin with <paramref name="substring" />.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute">
      <summary>Class that is used to specify the category of a unit test.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute" /> class by applying the supplied category to the test.</summary>
      <param name="testCategory">The test category to be applied.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute.TestCategories">
      <summary>Gets the test category that has been applied to the test.</summary>
      <returns>Returns the test category that has been applied to the test.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute">
      <summary>Provides a base class for the Category attribute.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute" /> class. </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute.TestCategories">
      <summary>Gets the test category that has been applied to the test.</summary>
      <returns>The test category.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute">
      <summary>Used to identify classes that contain test methods. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassExtensionAttribute">
      <summary>Activates a class so that it is recognized as a Unit Test extension class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassExtensionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassExtensionAttribute" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassExtensionAttribute.Equals(System.Object)">
      <summary>Determines whether the test class extension object is equal to the provided test class extension object.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="other">Test class extension object that is provided for comparison.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassExtensionAttribute.ExtensionId">
      <summary>Gets the unique ID of the extension.</summary>
      <returns>The unique ID of the extension.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassExtensionAttribute.GetClientSide">
      <summary>Gets the TestTypeExtensionClientSide object.</summary>
      <returns>The TestTypeExtensionClientSide object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassExtensionAttribute.GetExecution">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestExtensionExecution" /> object.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestExtensionExecution" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassExtensionAttribute.GetHashCode">
      <summary>Returns the hash code for the ID of the test class extension object.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute">
      <summary>Identifies a method that contains code that must be used after the test has run and to free resources obtained by all the tests in the test class. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute" /> class. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfiguration">
      <summary>Provides access to a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection" /> that represents the microsoft.visualstudio.testtools section in an app.config file. </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfiguration.ConfigurationSection">
      <summary>Gets a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection" /> object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection" /> object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection">
      <summary>Provides access to data source configuration data. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection" /> class. </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection.DataSources">
      <summary>Gets a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection" /> that contains data source configuration information.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection" /> object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext">
      <summary>Used to store information that is provided to unit tests.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.#ctor">
      <summary>Initializes a new instance of an object that derives from the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.AddResultFile(System.String)">
      <summary>When overridden in a derived class, adds a file name to the list in TestResult.ResultFileNames.</summary>
      <param name="fileName">The file name to add.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.AspNetDevelopmentServerPrefix">
      <summary>Represents the prefix for ASP.NET Development Server.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.BeginTimer(System.String)">
      <summary>When overridden in a derived class, begins a timer with the specified name. </summary>
      <param name="timerName">The name of the timer to begin.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.CurrentTestOutcome">
      <summary>You can use this property in a TestCleanup method to determine the outcome of a test that has run. </summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome" /> that states the outcome of a test that has run.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.DataConnection">
      <summary>When overridden in a derived class, gets the current data connection when the test is used for data driven testing.</summary>
      <returns>A <see cref="T:System.Data.Common.DbConnection" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.DataRow">
      <summary>When overridden in a derived class, gets the current data row when test is used for data driven testing.</summary>
      <returns>A <see cref="T:System.Data.DataRow" /> object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.DeploymentDirectory">
      <summary>Gets the directory for files deployed for the test run. This property typically contains a subdirectory of <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestRunDirectory" />.</summary>
      <returns>Returns the directory for files deployed for the test run.</returns>
      <exception cref="T:System.InvalidCastException">An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDeploymentDir" /> property of the test context.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.EndTimer(System.String)">
      <summary>When overridden in a derived class, ends a timer with the specified name.</summary>
      <param name="timerName">The name of the timer to end.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.FullyQualifiedTestClassName">
      <summary>Gets the fully-qualified name of the class that contains the test method that is currently running.</summary>
      <returns>The fully-qualified name of the class that contains the test method that is currently running.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.Properties">
      <summary>When overridden in a derived class, gets the test properties.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> object that contains key/value pairs that represent the test properties.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.RequestedPage">
      <summary>Gets the requested page.</summary>
      <returns>A <see cref="T:System.Web.UI.Page" /> object.</returns>
      <exception cref="T:System.InvalidCastException">An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.RequestedPage" /> property of the test context.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.ResultsDirectory">
      <summary>Gets the top-level directory that contains test results and test result directories for the test run. This is typically a subdirectory of <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestRunDirectory" />.</summary>
      <returns>The top-level directory that contains test results and test result directories for the test run.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDeploymentDir">
      <summary>Gets the path to the test deployment directory. Deprecated. Use <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.DeploymentDirectory" /> instead.</summary>
      <returns>The path to the test deployment directory.</returns>
      <exception cref="T:System.InvalidCastException">An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDeploymentDir" /> property of the test context.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDir">
      <summary>Gets the path to the test directory. Deprecated. Use <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestRunDirectory" /> instead.</summary>
      <returns>The path to the test directory.</returns>
      <exception cref="T:System.InvalidCastException">An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDir" />  property of the test context.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestLogsDir">
      <summary>Gets the path to the test log directory. Deprecated. Use <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestRunResultsDirectory" /> instead.</summary>
      <returns>The path to the test log directory.</returns>
      <exception cref="T:System.InvalidCastException">An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestLogsDir" />   property of the test context.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestName">
      <summary>Gets the test name.</summary>
      <returns>The test name.</returns>
      <exception cref="T:System.InvalidCastException">An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestName" />    property of the test context.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestResultsDirectory">
      <summary>Gets the directory for the test result files.</summary>
      <returns>The directory for the test result files.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestRunDirectory">
      <summary>Gets the top-level directory for the test run that contains deployed files and result files.</summary>
      <returns>The top-level directory for the test run that contains deployed files and result files.</returns>
      <exception cref="T:System.InvalidCastException">An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDir" />  property of the test context.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestRunResultsDirectory">
      <summary>Gets the top-level directory for the test run result files. This property typically contains a subdirectory of <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.ResultsDirectory" />.</summary>
      <returns>The top-level directory for the test run result files.</returns>
      <exception cref="T:System.InvalidCastException">An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestLogsDir" />   property of the test context.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.WriteLine(System.String,System.Object[])">
      <summary>When overridden in a derived class, used to write trace messages while the test is running.</summary>
      <param name="format">The string that contains the trace message.</param>
      <param name="args">Arguments to add to the trace message.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution">
      <summary>This class represents events that are related to test execution.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution" /> class.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterAssemblyCleanup">
      <summary>Occurs after the assembly finishes cleanup.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterAssemblyInitialize">
      <summary>Occurs after the assembly initializes.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterClassCleanup">
      <summary>Occurs after the class finishes cleanup.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterClassInitialize">
      <summary>Occurs after the class initializes.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterTestCleanup">
      <summary>Occurs after the test finishes cleanup.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.AfterTestInitialize">
      <summary>Occurs after the test initializes.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeAssemblyCleanup">
      <summary>Occurs before the assembly starts cleanup.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeAssemblyInitialize">
      <summary>Occurs before the assembly starts initialization.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeClassCleanup">
      <summary>Occurs before the class starts cleanup.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeClassInitialize">
      <summary>Occurs before the class starts initialization.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeTestCleanup">
      <summary>Occurs before the test starts cleanup.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.BeforeTestInitialize">
      <summary>Occurs before the test starts initialization.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.OnTestStopping">
      <summary>Occurs when a test is stopped before it is completed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution.RunContext">
      <summary>Gets the context of this test run.</summary>
      <returns>The context of this test run.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecutionEventArgs">
      <summary>Base class for events in the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecutionEventArgs.Instance">
      <summary>Gets the instance of test class. Defined only in test methods.</summary>
      <returns>The instance of test class. Defined only in test methods.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecutionEventArgs.MethodInfo">
      <summary>Gets the method that is called.</summary>
      <returns>The method that is called.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecutionEventArgs.TestContext">
      <summary>Gets the test context of the user. </summary>
      <returns>The test context of the user.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestExtensionExecution">
      <summary>This class enables the customized execution of tests.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestExtensionExecution.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestExtensionExecution" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestExtensionExecution.CreateTestMethodInvoker(Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerContext)">
      <summary>Creates the Test Method Invoker.</summary>
      <returns>Returns the test method invoker as defined by the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethodInvoker" /> interface.</returns>
      <param name="context">The context.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestExtensionExecution.Dispose">
      <summary>Releases all resources used by the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestExtensionExecution" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestExtensionExecution.Initialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution)">
      <summary>Before execution starts, this method is called to enable subscription to the Unit Test Events.</summary>
      <param name="execution">The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute">
      <summary>Identifies the method to run before the test to allocate and configure resources needed by all tests in the test class. This class cannot be inherited.  </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute">
      <summary>Used to identify test methods. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute" /> class. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerContext">
      <summary>Passed to the Unit Test Adapter to the TestExtensionExecution.CreateMethodInvoker.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerContext" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerContext.InnerInvoker">
      <summary>Gets the <see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethodInvoker.Invoke" /> method of the test method invoker.</summary>
      <returns>The <see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethodInvoker.Invoke" /> method of the test method invoker.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerContext.TestContext">
      <summary>Gets the test context.</summary>
      <returns>The test context.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerContext.TestMethodInfo">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> of the test method.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> of the test method.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerResult">
      <summary>The result that is returned by <see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethodInvoker.Invoke" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerResult" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerResult.Exception">
      <summary>Gets or sets the <see cref="T:System.Exception" /> that is thrown in the invoker.</summary>
      <returns>The <see cref="T:System.Exception" /> that is thrown in the invoker.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerResult.ExtensionResult">
      <summary>Gets or sets the Unit Test Extension custom result.</summary>
      <returns>The Unit Test Extension custom result.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute">
      <summary>Establishes a test specific property on a method. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute" /> class with values for the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Name" /> and <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Value" /> properties. </summary>
      <param name="name">The name of the test property.</param>
      <param name="value">The value of the test property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Name">
      <summary>Gets the name of the test property.</summary>
      <returns>The name of the test property.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Value">
      <summary>Gets the value of the test property.</summary>
      <returns>The value of the test property.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout">
      <summary>Enumeration for time-outs that can be used with the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute" /> class.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout.Infinite">
      <summary>The maximum time-out amount.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute">
      <summary>Used to specify the time-out period of a unit test.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout)"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute" /> class.</summary>
      <param name="timeout">The time-out period of a unit test. This is measured in milliseconds.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.Timeout">
      <summary>Gets the time-out period for a unit test.</summary>
      <returns>The time-out period for a unit test. This is measured in milliseconds.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException">
      <summary>This is the base class for unit test exceptions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException" /> class. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException" /> class with a specified error. </summary>
      <param name="msg">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException" /> class with a specified error message and a reference to the inner exception that caused this exception. </summary>
      <param name="msg">The error message that explains the reason for the exception.</param>
      <param name="ex">The exception that is the cause of the current exception. If the <paramref name="ex" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.Message">
      <summary>Gets a message that describes the current exception.</summary>
      <returns>A message describing the exception.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome">
      <summary>Use UnitTestOutcome to programmatically determine the outcome of a test that has run or is currently running. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Failed">
      <summary>The test failed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Inconclusive">
      <summary>An Assert.<see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive" /> was raised. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed">
      <summary>The test passed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.InProgress">
      <summary>The test is currently running.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Error">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Timeout">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Aborted">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Unknown">
      <summary>The outcome of the test is unknown. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.WebServiceHelper">
      <summary>Contains helper methods for Web service testing. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.WebServiceHelper.TryUrlRedirection(System.Web.Services.Protocols.WebClientProtocol,Microsoft.VisualStudio.TestTools.UnitTesting.TestContext,System.String)">
      <summary>Redirects a Web service object to the ASP.NET Development Server instead of the resource that is defined in the provided Web reference.</summary>
      <returns>true if a redirect occurred; otherwise, false.</returns>
      <param name="client">An instance of the Web service type that is being tested.</param>
      <param name="context">The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext" /> for this unit test.</param>
      <param name="identifier">A unique string that identifies an ASP.NET Development Server instance. This matches the name parameter of an <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute" /> on the test method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute">
      <summary>Used to specify a work item associated with a test.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute" /> class with an identification number.</summary>
      <param name="id">The ID of the work item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute.Id">
      <summary>Gets the ID of the work item.</summary>
      <returns>The work item ID.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute">
      <summary>Specifies the settings that must be used for the ASP.NET Development Server for the test. This is primarily used for Web service unit tests.   </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute" /> class with the server name and the path to the Web application.</summary>
      <param name="name">The name of the ASP.NET Development Server. This name must be unique for all <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute" /> specified on a single test.</param>
      <param name="pathToWebApp">The path to the Web application. This can also include environmental variables.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute" /> class with the server name, the path to the Web application, and the Web application root.</summary>
      <param name="name">The name of the server.</param>
      <param name="pathToWebApp">The path to the Web application. This can also include environment variables like %TEMPDIR%\website1.</param>
      <param name="webAppRoot">The Web application root.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.Name">
      <summary>Gets the name of the ASP.NET Development Server.</summary>
      <returns>The name of the ASP.NET Development Server.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.PathToWebApp">
      <summary>Gets the path to the Web application.</summary>
      <returns>The path to the Web application.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.WebAppRoot">
      <summary>Gets the Web application root.</summary>
      <returns>The Web application root.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute">
      <summary>Specifies the settings to use when an ASP.NET Development Server is the host server for the test. This is used for ASP.NET unit tests.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute" /> class with the full path name.</summary>
      <param name="pathToWebApp">The full path of the Web application. The path can include environment variables like %TEMPDIR%\website1.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute" /> class with the full path name and the Web application root.</summary>
      <param name="pathToWebApp">The full path of the Web application. The path can include environment variables like %TEMPDIR%\website1.</param>
      <param name="webAppRoot">The Web application root.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.PathToWebApp">
      <summary>Gets the path of the Web application.</summary>
      <returns>The path of the Web application.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.WebAppRoot">
      <summary>Gets the Web application root.</summary>
      <returns>The Web application root.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute">
      <summary>Specifies the user name and password for ASP.NET sites that require basic authentication or Windows authentication. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute" /> class with a user name and password needed to access the test Web site.</summary>
      <param name="userName">The user to authenticate.</param>
      <param name="password">The associated password for the user.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute" /> class with a user name, password and domain needed to access the test Web site.</summary>
      <param name="userName">The user to authenticate.</param>
      <param name="password">The associated password for the user.</param>
      <param name="domain">The domain of the user.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.Domain">
      <summary>Gets the user's domain.</summary>
      <returns>The name of the user's domain.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.Password">
      <summary>Gets the user's password.</summary>
      <returns>The user's password.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.UserName">
      <summary>Gets the user's user name.</summary>
      <returns>The user's user name.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute">
      <summary>Specifies the URL that should be requested to give context to the test. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute" /> class.</summary>
      <param name="urlToTest">The URL to give context to the test.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute.UrlToTest">
      <summary>Gets the URL that gives context to the test.</summary>
      <returns>A URL string.</returns>
    </member>
  </members>
</doc>